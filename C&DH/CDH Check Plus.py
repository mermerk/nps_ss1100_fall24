#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec  9 14:57:43 2024

@author: biancarubio
"""
## this script was adapted from suggestions generated by Chat GPT

input_string = input('Enter command: ')  

# Define the schema
command_dict = {
    "RCS": {
        "full_name": "Reaction Control Subsystem",
        "Commands": {
            "CMD01": ['THRUST_X', range(0, 60)],
            "CMD02": ['THRUST_Y', range(0, 60)],
            "CMD03": ['THRUST_Z', range(0, 60)],
            "CMD04": ['SAFE_MODE', {0, 1}]
        }
    },
    "TCS": {
        "full_name": "Thermal Control Subsystem",
        "Commands": {
            "CMD01": ['HEATER_ON', {0, 1}],
            "CMD02": ['HEATER_OFF', {0, 1}],
            "CMD03": ['VENT_OPEN_RADIATOR', {0, 1}],
            "CMD04": ['TEMP_SETPOINT', range(-30, 60)]
        }
    },
    "ACS": {
        "full_name": "Attitude Control Subsystem",
        "Commands": {
            "CMD01": ['ROTATE_X', range(-360, 360)],
            "CMD02": ['ROTATE_Y', range(-360, 360)],
            "CMD03": ['ROTATE_Z', range(-360, 360)],
            "CMD04": ['SAFE_MODE', {0, 1}]
        }
    },
    "CDH": {
        "full_name": "Command & Data Handling",
        "Commands": {
            "CMD01": ['TRANSMIT_HIGH', {0, 1}],
            "CMD02": ['TRANSMIT_LOW', {0, 1}],
            "CMD03": ['RECEIVE_MODE', {0, 1}],
            "CMD04": ['SAFE_MODE', {0, 1}]
        }
    },
    "TTC": {
        "full_name": "Telemetry, Tracking, & Command",
        "Commands": {
            "CMD01": ['TRANSMIT_MODE', {0, 1}],
            "CMD02": ['RECEIVE_MODE', {0, 1}],
            "CMD03": ['TRACKING_MODE', {0, 1}],
            "CMD04": ['SAFE_MODE', {0, 1}]
        }
    },
    "EPS": {
        "full_name": "Electrical Power Subsystem",
        "Commands": {
            "CMD01": ['BATTERY_CHARGE_MODE', {0, 1}],
            "CMD02": ['POWER_ON_MODULE', {0, 1, 2, 3, 4}],
            "CMD03": ['POWER_OFF_MODULE', {0, 1, 2, 3, 4}],
            "CMD04": ['VOLTAGE_SETPOINT', range(0, 120)]
        }
    },
    "PL1": {
        "full_name": "Payload System 1",
        "Commands": {
            "CMD01": ['START_DATA_ACQUISITION', {0, 1}],
            "CMD02": ['STOP_DATA_ACQUISITION', {0, 1}],
            "CMD03": ['CALIBRATE_SENSOR', {0, 1}],
            "CMD04": ['SAFE_MODE', {0, 1}]
        }
    },
    "PL2": {
        "full_name": "Payload System 2",
        "Commands": {
            "CMD01": ['START_DATA_ACQUISITION', {0, 1}],
            "CMD02": ['STOP_DATA_ACQUISITION', {0, 1}],
            "CMD03": ['CALIBRATE_SENSOR', {0, 1}],
            "CMD04": ['SAFE_MODE', {0, 1}]
        }
    }
}
#### function created to align string value to dictionary to instead of using built in function re 
def parse_command(input_string):
  
## I was having constant error messages not realizing that in my original input line, I included a space before the subsystem
    # Remove any leading/trailing whitespace
    input_string = input_string.strip()
    
    # Manually split the input string by ':' (instead of spaces)
    parts = input_string.split(':')

    # Ensure we got exactly 3 parts: subsystem, command, and parameter
    if len(parts) != 3:
        raise ValueError(f"Invalid input format. Expected 'Subsystem:Command:Parameter'")
    
    subsystem_code = parts[0].strip()
    command_code = parts[1].strip()
    param_value_str = parts[2].strip()
    
    # Validate subsystem code
    subsystem = command_dict.get(subsystem_code)
    if not subsystem:
        raise ValueError(f"Invalid subsystem code '{subsystem_code}'.")

    subsystem_full_name = subsystem["full_name"]

    # Validate command code
    command = subsystem["Commands"].get(command_code)
    if not command:
        raise ValueError(f"Invalid command code '{command_code}' for subsystem '{subsystem_code}'.")

    command_description = command[0]
    valid_params = command[1]

    # Manually convert parameter to an integer
    param_value = 0
    is_negative = False
    i = 0
    if param_value_str[0] == '-':
        is_negative = True
        i = 1
    
    while i < len(param_value_str):
        if param_value_str[i] < '0' or param_value_str[i] > '9':
            raise ValueError(f"Invalid parameter value '{param_value_str}', expected an integer.")
        param_value = param_value * 10 + (ord(param_value_str[i]) - ord('0'))
        i += 1
    
    if is_negative:
        param_value = -param_value

    # Validate the parameter value
    # Check for valid parameter type, range or set
    valid = False
    if isinstance(valid_params, range):
        # Check if the param_value is in the range
        if param_value in valid_params:
            valid = True
    elif isinstance(valid_params, set):
        # Check if the param_value is in the set
        if param_value in valid_params:
            valid = True

    if not valid:
        raise ValueError(f"Invalid parameter value '{param_value}' for command '{command_code}'.")

    # Return the tuple: (subsystem full name, command description, parameter value)
    return (subsystem_full_name, command_description, param_value)
    result = parse_command(input_string)
    print(f"Parsed Result: {result}")

